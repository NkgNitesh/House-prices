# -*- coding: utf-8 -*-
"""House-prices.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19PwjCBxT40T37gxyAdaJXgUV4vHE5Bk1
"""



import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

import pandas as pd

# Load the dataset
df = pd.read_csv('/content/housing.csv')

# Display the first few rows to get an overview of the data
df.head()

# Check for missing values
print(df.isnull().sum())

# Summary statistics
print(df.describe())

# Check data types of each column
print(df.dtypes)

# Alternatively, display non-numeric columns
non_numeric_columns = df.select_dtypes(include=['object']).columns
print("Non-numeric columns:", non_numeric_columns)

# One-hot encode the categorical columns
df_encoded = pd.get_dummies(df, columns=non_numeric_columns, drop_first=True)

# Display the first few rows of the encoded dataset
df_encoded.head()

import seaborn as sns
import matplotlib.pyplot as plt

# Plot a correlation matrix for the encoded dataset
plt.figure(figsize=(12, 8))
sns.heatmap(df_encoded.corr(), annot=True, cmap='coolwarm', fmt='.2f')
plt.title('Correlation Matrix')
plt.show()

# Display the column names of the DataFrame
print(df.columns)

import seaborn as sns
import matplotlib.pyplot as plt

# Scatter plot for selected features vs. the target
sns.pairplot(df, x_vars=['total_rooms', 'median_income'], y_vars='median_house_value', height=4, aspect=1, kind='scatter')
plt.show()

# Histogram of the target variable
df['median_house_value'].hist(bins=20)
plt.xlabel('Median House Value')
plt.ylabel('Frequency')
plt.title('Distribution of Median House Value')
plt.show()

# Scatter plot of geographical locations colored by house value
plt.figure(figsize=(10, 6))
plt.scatter(df['longitude'], df['latitude'], c=df['median_house_value'], cmap='viridis', s=5)
plt.colorbar(label='Median House Value')
plt.xlabel('Longitude')
plt.ylabel('Latitude')
plt.title('House Prices by Location')
plt.show()

# Pair plot with selected features
sns.pairplot(df, vars=['housing_median_age', 'total_rooms', 'median_income', 'median_house_value'], height=2.5)
plt.show()

# Example: Handling missing values
df = df.dropna()  # Or use df.fillna() for imputing missing values

# Example: Encoding categorical variables
df = pd.get_dummies(df, drop_first=True)

# Example: Scaling features
from sklearn.preprocessing import StandardScaler

scaler = StandardScaler()
scaled_features = scaler.fit_transform(df.drop('median_house_value', axis=1))
df_scaled = pd.DataFrame(scaled_features, columns=df.columns[:-1])

from sklearn.model_selection import train_test_split

# Define features (X) and target (y)
X = df.drop('median_house_value', axis=1)  # Replace with the actual target column name
y = df['median_house_value']

# Split the data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

# Initialize and train the model
model = LinearRegression()
model.fit(X_train, y_train)

# Make predictions
y_pred = model.predict(X_test)

# Evaluate the model
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f'Mean Squared Error: {mse}')
print(f'R-squared: {r2}')

# Plotting Actual vs Predicted values
plt.scatter(y_test, y_pred)
plt.xlabel('Actual Prices')
plt.ylabel('Predicted Prices')
plt.title('Actual vs Predicted Prices')
plt.show()

